openapi: 3.0.3
info:
  title: LZV.nrw - Notification-API
  description:
    This API document describes the endpoints for the Notification-API.
  version: 0.2.0
servers:
  - url: 'http://localhost:8080/'
tags:
  - name: notification
    description: notification-related endpoints
  - name: status
    description: status-related endpoints
  - name: configuration
    description: configuration-related endpoints
paths:
  /:
    options:
      tags:
        - notification
        - configuration
      description: returns a list of available topics
      operationId: list_topics
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                description: list of topics
                items:
                  $ref: '#/components/schemas/Topic'
  /ip:
    get:
      tags:
        - notification
      description: returns the apparent client ip if possible
      operationId: get_ip
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  ip:
                    type: string
                    description: client's apparent ip address
                example:
                  ip: 127.0.0.1
  /registration:
    get:
      tags:
        - status
        - notification
      description: returns registration status
      operationId: registration_status
      parameters:
        - $ref: '#/components/parameters/Token'
      responses:
        '200':
          $ref: '#/components/responses/200OK'
        '204':
          $ref: '#/components/responses/204Unknown'
        '400':
          $ref: '#/components/responses/400BadRequest'
    post:
      tags:
        - notification
      description: |-
        register with notification service

        generates a unique identifier and associates with given url
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: subscriber information
              properties:
                baseUrl:
                  $ref: '#/components/schemas/BaseUrl'
              required:
                - baseUrl
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriber'
        '400':
          $ref: '#/components/responses/400BadRequest'
    delete:
      tags:
        - notification
      description: deregister user (automatically cancels subscriptions)
      operationId: deregister
      parameters:
        - $ref: '#/components/parameters/Token'
      responses:
        '200':
          $ref: '#/components/responses/200OK'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404Unknown'
    options:
      tags:
        - notification
        - status
      description: returns a list of registered users
      operationId: list_users
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                description: list of registered users
                items:
                  $ref: '#/components/schemas/Subscriber'
  /subscription:
    get:
      tags:
        - status
        - notification
      description: returns whether user is subscribed to given topic
      operationId: subscription_status
      parameters:
        - $ref: '#/components/parameters/Token'
        - $ref: '#/components/parameters/Topic'
      responses:
        '200':
          $ref: '#/components/responses/200OK'
        '204':
          $ref: '#/components/responses/204Unknown'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404Unknown'
    post:
      tags:
        - notification
      description: subscribe to given topic
      operationId: subscribe
      parameters:
        - $ref: '#/components/parameters/Token'
        - $ref: '#/components/parameters/Topic'
      responses:
        '200':
          $ref: '#/components/responses/200OK'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404Unknown'
    delete:
      tags:
        - notification
      description: unsubscribe from given topic
      operationId: unsubscribe
      parameters:
        - $ref: '#/components/parameters/Token'
        - $ref: '#/components/parameters/Topic'
      responses:
        '200':
          $ref: '#/components/responses/200OK'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404Unknown'
    options:
      tags:
        - notification
        - status
      description: returns a list of subscribed users for the given topic
      operationId: list_subscribers
      parameters:
        - $ref: '#/components/parameters/Topic'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                description: list of subscribed users
                items:
                  $ref: '#/components/schemas/Subscriber'
        '400':
          $ref: '#/components/responses/400BadRequest'
  /notify:
    post:
      tags:
        - notification
      description: |-
        submit message for broadcasting

        note that requests are executed synchronously and have a timeout
        as specified in the response /config-GET

        if an error occurs while making a request to a client (e.g.,
        unable to connect, timeout, or unexpected response code), the
        subscription of that client and topic is automatically revoked
      operationId: notify
      parameters:
        - $ref: '#/components/parameters/Topic'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: |-
                broadcast configuration

                passing a user-token via 'skip' omits that user during
                broadcast
              properties:
                json:
                  type: object
                  description: json body to in broadcasted
                  additionalProperties: true
                query:
                  type: object
                  description: query args to in broadcasted
                  additionalProperties:
                    nullable: true
                    oneOf:
                      - type: boolean
                      - type: string
                      - type: integer
                      - type: number
                headers:
                  type: object
                  description: HTTP-headers used in broadcast
                  additionalProperties: true
                skip:
                  $ref: '#/components/schemas/Token'
            example:
              json:
                origin: Frontend
                reason: User abort.
              query:
                token: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
              headers:
                Content-Type: application/json
              skip: 061dab0c-3cd8-4977-a802-837c96a28c57
      responses:
        '200':
          $ref: '#/components/responses/200OK'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404Unknown'
  /config:
    get:
      tags:
        - configuration
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: user registry-related configuration
                properties:
                  registry:
                    type: object
                    description: database configuration
                    properties:
                      backend:
                        type: string
                        description: identifier for database backend-type
                        enum:
                          - MemoryStore
                          - JSONFileStore
                      dir:
                        type: string
                        description: working dir in case of 'disk'-type backend
                        example: file_storage/db
                    example:
                        backend: JSONFileStore
                        dir: /db/registry
                    required:
                      - backend
                  topics:
                    type: object
                    description: broadcasting configuration by topic
                    additionalProperties:
                      type: object
                      description: topic configuration details
                      properties:
                        path:
                          type: string
                          description: url path
                          example: /abort
                        method:
                          type: string
                          description: HTTP method used for broadcast
                          enum:
                            - GET
                            - POST
                            - PUT
                            - DELETE
                            - OPTIONS
                            - PATCH
                          example: DELETE
                        statusOk:
                          type: integer
                          description: |-
                            expected status code for positive result
                            (receiver of broadcast)

                            if another status is returned, the client is
                            automatically removed from the list of
                            active subscriptions (for this topic)
                          example: 200
                        db:
                          type: object
                          description: database configuration
                          properties:
                            backend:
                              type: string
                              description: identifier for database backend-type
                              enum:
                                - MemoryStore
                                - JSONFileStore
                            dir:
                              type: string
                              description: working dir in case of 'disk'-type backend
                              example: /db
                      required:
                        - path
                        - method
                        - statusOk
                        - db
                    example:
                      abort:
                        path: /abort
                        method: DELETE
                        statusOk: 200
                        db:
                          backend: JSONFileStore
                          dir: /db/abort
                  timeout:
                    type: number
                    description:
                      timeout duration of broadcast-requests to clients
                    example: 1
                  cors:
                    type: boolean
                    description: whether CORS-requests are accepted
                required:
                  - registry
                  - topics
                  - timeout
                  - cors
components:
  schemas:
    Topic:
      title: Token
      type: string
      description: notification topic
      example: abort
    Token:
      title: Token
      type: string
      description: serves as an identifier for a client
      example: 061dab0c-3cd8-4977-a802-837c96a28c57
    BaseUrl:
      title: BaseUrl
      type: string
      description: this url is used when making a broadcast
      example: https://www.lzv.nrw/subscriber
    Subscriber:
      title: Subscriber
      type: object
      description: subscriber information
      properties:
        token:
          $ref: '#/components/schemas/Token'
        baseUrl:
          $ref: '#/components/schemas/BaseUrl'
      required:
        - token
        - baseUrl
  parameters:
    Token:
      name: token
      in: query
      description: user identifier
      schema:
        $ref: '#/components/schemas/Token'
      required: true
    Topic:
      name: topic
      in: query
      description: notification topic
      schema:
        $ref: '#/components/schemas/Topic'
      required: true
  responses:
    200OK:
      description: Success
      content:
        text/plain:
          schema:
            type: string
            example: OK
    204Unknown:
      description: Not registered/subscribed
      content:
        text/plain:
          schema:
            type: string
            example: Not registered
    400BadRequest:
      description: Bad request
      content:
        text/plain:
          schema:
            type: string
            example: Missing topic
    404Unknown:
      description: Unknown user or topic
      content:
        text/plain:
          schema:
            type: string
            example: Unknown user